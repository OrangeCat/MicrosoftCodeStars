"""
Сенсационное открытие сделали недавно британские астрофизики:
 на других планетах не только есть жизнь, но и своя поп-культура!
 Анализируя полученные сообщения с радиотелескопа
 (одно из них дается вам в качестве задания) они обнаружили
 фрагменты ритуальных песен инопланетян!

Установлено, что в песнях очень часто повторяются похожие пары слов
(например, «hey сortana» или “ok google” – будем называть их значимыми парами)
, перемежаемые большим количеством слов, не поддающихся расшифровке.
Для общения с инопланетянами предлагается послать им обратно послание, с
обранное из значимых пар следующим образом:
берем в порядке убывания частоты все первые слова пар,
и для каждого такого слова в качестве второго берем самое часто встречающееся
из вторых слов для данного первого слова.
Полученные слова надо записать подряд в виде единого
текста для передачи на радиотелескоп.

Вам предлагается написать такую программу для генерации ответного послания.
Удачи!
"""


def sort_as_microsoft(lst):
    """
    :param lst: [слово, частота]
    :return: список слов в порядке убывания частоты
        при одинаковой частоте первым берется то, которое было первым в тексте.
    """
    l = lst.copy()
    r = []
    while len(lst) != 0:
        m = max([lst[i][1] for i in range(len(lst))])
        for i in range(len(lst)):
            if lst[i][1] == m:
                r.append(lst.pop(i)[0])
                break
    return r


def max_count_world(lst):
    c=0
    w=''
    #lst = sorted(lst)
    #lst.sort()
    for i in range(len(lst)):
        ww = lst[i]
        cc = lst.count(ww)
        if cc > c:
            c = cc
            w = ww

    return w


d = []
r = ""
with open("data/20.data", 'r') as inf:
    for line in inf:
        data = line.strip()

s = data.split()

# Определим значимые пары
data = []
# f = open('pairs.txt', 'w')
# Определим значимые пары
for i in range(len(s)-1):
    ps = s[i]+' '+s[i+1]
    data.append(ps)

for ps in data:
    if data.count(ps) > 15:
        d.append(ps)
        # f.write(ps + '\n')
# for sss in d:
#     print(sss)

# сейчас в d - список значащих пар (неупорядоченный)

# Можно поробовать другой способ подбора пар.
# Сначала взять самую повторяющуюся, потом очистить текст от нее.
# и так далее, пока частота не опустится ниже заданного значения

ds = [] # список первых слов в порядке их появления
d2 = {} # словарь первыйх слов и пар к ним
for i in range(len(d)):
    first, second = d[i].split()
    if first in d2:
        d2[first].append(second)
    else:
        d2.update({first: [second]})
        ds.append(first)

# теперь надо упорядочить ds
ds = sort_as_microsoft([[ds[i], len(d2[ds[i]])] for i in range(len(ds))])

for i in range(len(ds)):
    r += ds[i] + " " + max_count_world(d2[ds[i]]) + " "

print(r)
